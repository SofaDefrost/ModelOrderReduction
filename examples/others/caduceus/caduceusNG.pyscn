# -*- coding: utf-8 -*-
import os
import Sofa

meshPath = os.path.dirname(os.path.abspath(__file__))+'/mesh/'


def createScene(rootNode):
    rootNode.findData('dt').value=0.02
    rootNode.findData('gravity').value=[0, -981.0, 0]
    rootNode.addObject('VisualStyle', displayFlags='showBehaviorModels showForceFields')

    rootNode.addObject('RequiredPlugin', name='ModelOrderReduction')
    rootNode.addObject('RequiredPlugin', name='SoftRobots')
    rootNode.addObject('RequiredPlugin', name='Sofa.Component.AnimationLoop') # Needed to use components [FreeMotionAnimationLoop]  
    rootNode.addObject('RequiredPlugin', name='Sofa.Component.Collision.Detection.Algorithm') # Needed to use components [BVHNarrowPhase,BruteForceBroadPhase,CollisionPipeline]  
    rootNode.addObject('RequiredPlugin', name='Sofa.Component.Collision.Detection.Intersection') # Needed to use components [LocalMinDistance]  
    rootNode.addObject('RequiredPlugin', name='Sofa.Component.Collision.Geometry') # Needed to use components [LineCollisionModel,PointCollisionModel,TriangleCollisionModel]  
    rootNode.addObject('RequiredPlugin', name='Sofa.Component.Collision.Response.Contact') # Needed to use components [CollisionResponse]  
    rootNode.addObject('RequiredPlugin', name='Sofa.Component.Constraint.Lagrangian.Correction') # Needed to use components [GenericConstraintCorrection]  
    rootNode.addObject('RequiredPlugin', name='Sofa.Component.Constraint.Lagrangian.Solver') # Needed to use components [GenericConstraintSolver]  
    rootNode.addObject('RequiredPlugin', name='Sofa.Component.IO.Mesh') # Needed to use components [MeshOBJLoader,MeshVTKLoader]  
    rootNode.addObject('RequiredPlugin', name='Sofa.Component.LinearSolver.Direct') # Needed to use components [SparseLDLSolver]  
    rootNode.addObject('RequiredPlugin', name='Sofa.Component.Mapping.Linear') # Needed to use components [BarycentricMapping]  
    rootNode.addObject('RequiredPlugin', name='Sofa.Component.Mass') # Needed to use components [UniformMass]  
    rootNode.addObject('RequiredPlugin', name='Sofa.Component.ODESolver.Backward') # Needed to use components [EulerImplicitSolver]  
    rootNode.addObject('RequiredPlugin', name='Sofa.Component.SolidMechanics.FEM.Elastic') # Needed to use components [TetrahedronFEMForceField]  
    rootNode.addObject('RequiredPlugin', name='Sofa.Component.StateContainer') # Needed to use components [MechanicalObject]  
    rootNode.addObject('RequiredPlugin', name='Sofa.Component.Topology.Container.Constant') # Needed to use components [MeshTopology]  
    rootNode.addObject('RequiredPlugin', name='Sofa.Component.Topology.Container.Dynamic') # Needed to use components [TetrahedronSetTopologyContainer]  
    rootNode.addObject('RequiredPlugin', name='Sofa.Component.Visual') # Needed to use components [Camera,VisualStyle]  
    rootNode.addObject('RequiredPlugin', name='Sofa.GL.Component.Rendering3D') # Needed to use components [OglModel]  
    rootNode.addObject('RequiredPlugin', name='Sofa.GL.Component.Shader') # Needed to use components [LightManager,SpotLight]  



    rootNode.addObject('FreeMotionAnimationLoop')
    rootNode.addObject('GenericConstraintSolver', printLog='0', tolerance="1e-6", maxIterations="500")
    rootNode.addObject('CollisionPipeline', verbose="0")
    rootNode.addObject('BruteForceBroadPhase', name="N2")
    rootNode.addObject('BVHNarrowPhase')
    rootNode.addObject('CollisionResponse', response="FrictionContactConstraint", responseParams="mu=0.7")
    rootNode.addObject('LocalMinDistance', name="Proximity", alarmDistance="2.5", contactDistance="0.1", angleCone="0.05")
    
    
    rootNode.addObject('Camera', position="0 30 90", lookAt="0 30 0")
    rootNode.addObject('LightManager')
    rootNode.addObject('SpotLight', name="light1", color="1 1 1", position="0 80 25", direction="0 -1 -0.8", cutoff="30", exponent="1" )
    rootNode.addObject('SpotLight', name="light2", color="1 1 1", position="0 40 100", direction="0 0 -1", cutoff="30", exponent="1" )

    rootNode.addObject('MeshOBJLoader', name="visual_snake_body", filename="mesh/snake_body.obj", handleSeams="1" )
    rootNode.addObject('MeshOBJLoader', name="visual_snake_cornea", filename="mesh/snake_cornea.obj", handleSeams="1" )
    rootNode.addObject('MeshOBJLoader', name="visual_snake_eye", filename="mesh/snake_yellowEye.obj", handleSeams="1" )
    rootNode.addObject('MeshOBJLoader', name="SOFA_pod", filename="mesh/SOFA_pod.obj", handleSeams="1" )


    Snake = rootNode.addChild("Snake")
    Snake.addObject('EulerImplicitSolver',rayleighStiffness="0.1", rayleighMass="0.1")
    Snake.addObject('SparseLDLSolver',name='preconditioner')
    Snake.addObject('MeshVTKLoader', name='loader', filename=meshPath+'snake0.vtu', rotation=[-90, 0, 0], translation=[0,5,0])
    Snake.addObject('TetrahedronSetTopologyContainer',src = '@loader')
    Snake.addObject('MechanicalObject')
    Snake.addObject('UniformMass', totalMass="1.0")
    Snake.addObject('TetrahedronFEMForceField', name="FEM", youngModulus="10000.0", poissonRatio="0.4", method="large")
    Snake.addObject('GenericConstraintCorrection', linearSolver="@preconditioner")
    
    
    
    collis = Snake.addChild('collis')
    collis.addObject('MeshOBJLoader', name='loader', filename=meshPath+"meca_snake_900tri.obj",translation=[0,5,0])
    collis.addObject('MeshTopology', src='@loader', name='topo')
    collis.addObject('MechanicalObject', name='CollisModel')
    collis.addObject('TriangleCollisionModel', selfCollision=False)
    collis.addObject('LineCollisionModel', selfCollision=False)
    collis.addObject('PointCollisionModel', selfCollision=False)
    collis.addObject('BarycentricMapping')

    VisuBody = Snake.addChild('VisuBody')
    VisuBody.addObject('MeshOBJLoader', name='loader', filename=meshPath+"snake_body.obj")
    VisuBody.addObject("OglModel", name="VisualBody",src='@loader', texturename="textures/snakeColorMap.png", color=[1,1,1,0.6], translation=[0, 5, 0])
    VisuBody.addObject("BarycentricMapping")
    
    VisuCornea = Snake.addChild('VisuCornea')
    VisuCornea.addObject('MeshOBJLoader', name='loader', filename=meshPath+"snake_cornea.obj")
    VisuCornea.addObject("OglModel", name="VisuCornea",src='@loader', translation=[0, 5, 0])
    VisuCornea.addObject("BarycentricMapping")

    VisualEye = Snake.addChild('VisualEye')
    VisualEye.addObject('MeshOBJLoader', name='loader', filename=meshPath+"snake_yellowEye.obj")
    VisualEye.addObject("OglModel", name="VisualEye",src='@loader', translation=[0, 5, 0])
    VisualEye.addObject("BarycentricMapping")

    base = rootNode.addChild("base")

    stick = base.addChild("stick")
    stick.addObject('MeshOBJLoader',name="loader", filename="mesh/collision_batons.obj")
    stick.addObject('MeshTopology', src='@loader', name='topo')
    stick.addObject('MechanicalObject', name='stickCollisModel')
    stick.addObject('LineCollisionModel',simulated="false", moving="false")
    stick.addObject('PointCollisionModel',simulated="false", moving="false")
    
    blobs = base.addChild("blobs")
    blobs.addObject('MeshOBJLoader',name="loader", filename="mesh/collision_boules_V3.obj")
    blobs.addObject('MeshTopology', src='@loader', name='topo')
    blobs.addObject('MechanicalObject', name='blobsCollisModel')
    blobs.addObject('TriangleCollisionModel',simulated="false", moving="false")
    blobs.addObject('LineCollisionModel',simulated="false", moving="false")
    blobs.addObject('PointCollisionModel',simulated="false", moving="false")

    foot = base.addChild("foot")
    foot.addObject('MeshOBJLoader',name="loader", filename="mesh/collision_pied.obj")
    foot.addObject('MeshTopology', src='@loader', name='topo')
    foot.addObject('MechanicalObject', name='footCollisModel')
    foot.addObject('TriangleCollisionModel',simulated="false", moving="false")
    foot.addObject('LineCollisionModel',simulated="false", moving="false")
    foot.addObject('PointCollisionModel',simulated="false", moving="false")
    
    visu = base.addChild("visu")
    visu.addObject('MeshOBJLoader', name="SOFA_pod", filename="mesh/SOFA_pod.obj", handleSeams="1" )
    visu.addObject('OglModel' , src = '@SOFA_pod', name = 'VisuPOD',color=[1,69.0/255.0,0])