import Sofa
import Sofa.Core
import os
pathSceneFile = os.path.dirname(os.path.abspath(__file__))
pathMesh = os.path.dirname(os.path.abspath(__file__))+'/Mesh/'
# Units: mm, kg, s.     Pressure in kPa = k (kg/(m.s^2)) = k (g/(mm.s^2) =  kg/(mm.s^2)

##########################################
### Reduced Basis Definition           ###
##########################################
modesRobot = pathSceneFile + "/ROM_data/modesQuadrupedWellConverged.txt"
nbModes = 63
modesPositionStr = '0'
for i in range(1,nbModes):
    modesPositionStr = modesPositionStr + ' 0'

########################################################################
### Reduced Integration Domain for the PDMS membrane layer           ###
########################################################################
RIDMembraneFile = pathSceneFile + "/ROM_data/reducedIntegrationDomain_quadrupedMembraneWellConvergedNG005.txt"
weightsMembraneFile = pathSceneFile + "/ROM_data/weights_quadrupedMembraneWellConvergedNG005.txt"

#######################################################################
### Reduced Integration Domain for the main silicone body           ###
#######################################################################
RIDFile = pathSceneFile + '/ROM_data/reducedIntegrationDomain_quadrupedBodyWellConvergedNG003.txt'
weightsFile = pathSceneFile + '/ROM_data/weights_quadrupedBodyWellConvergedNG003.txt'

##############################################################
### Reduced Integration Domain in terms of nodes           ###
##############################################################
listActiveNodesFile = pathSceneFile + '/ROM_data/listActiveNodes_quadrupedBodyMembraneWellConvergedNG003and005.txt'

##########################################
### Reduced Order Booleans             ###
##########################################
performECSWBoolBody = "true"
performECSWBoolMembrane = "true"
performECSWBoolMappedMatrix = "true"
prepareECSWBool = "false"

class keyInteractiveController(Sofa.Core.Controller):
    def __init__(self, *args, **kwargs):
        Sofa.Core.Controller.__init__(self, *args, **kwargs)        
        self.node = kwargs.get("node", None)


    def init(self):
            
            self.rearLeftCavityNode = self.node.rearLeftCavity   # 1
            self.rearRightCavityNode = self.node.rearRightCavity # 2
            self.frontLeftCavityNode = self.node.frontLeftCavity # 3
            self.frontRightCavityNode = self.node.frontRightCavity # 4
            self.centerCavityNode = self.node.centerCavity # 0
            self.controlledItem = 0

    def onKeypressedEvent(self,c):
            increment = 100
            key = c['key']
            print ('key is: ', key)
            if (key  == "0"):
                self.controlledItem = 0
            elif (key  == "1"):
                self.controlledItem = 1
            elif (key  == "2"):
                self.controlledItem = 2
            elif (key  == "3"):
                self.controlledItem = 3
            elif (key  == "4"):
                self.controlledItem = 4
            
            if (key  == "+"):
                pressureValue = 0
                if (self.controlledItem == 0):
                    pressureValue = self.centerCavityNode.SurfacePressureConstraint.value.value[0] + increment
                    if (pressureValue <= 3500):
                        self.centerCavityNode.SurfacePressureConstraint.value.value = [pressureValue]
                elif (self.controlledItem == 1):
                    pressureValue = self.rearLeftCavityNode.SurfacePressureConstraint.value.value[0] + increment
                    if (pressureValue <= 2000):
                        self.rearLeftCavityNode.SurfacePressureConstraint.value.value = [pressureValue]
                elif (self.controlledItem == 2):
                    pressureValue = self.rearRightCavityNode.SurfacePressureConstraint.value.value[0] + increment
                    if (pressureValue <= 2000):
                        self.rearRightCavityNode.SurfacePressureConstraint.value.value = [pressureValue]
                elif (self.controlledItem == 3):
                    pressureValue = self.frontLeftCavityNode.SurfacePressureConstraint.value.value[0] + increment
                    if (pressureValue <= 2000):
                        self.frontLeftCavityNode.SurfacePressureConstraint.value.value = [pressureValue]
                else:
                    pressureValue = self.frontRightCavityNode.SurfacePressureConstraint.value.value[0] + increment
                    if (pressureValue <= 2000):
                        self.frontRightCavityNode.SurfacePressureConstraint.value.value = [pressureValue]
                    

            if (key  == "-"):
                if (self.controlledItem == 0):
                    pressureValue = self.centerCavityNode.SurfacePressureConstraint.value.value[0] - increment
                    if (pressureValue >= 0):
                        self.centerCavityNode.SurfacePressureConstraint.value.value = [pressureValue]
                elif (self.controlledItem == 1):
                    pressureValue = self.rearLeftCavityNode.SurfacePressureConstraint.value.value[0] - increment
                    if (pressureValue >= 0):
                        self.rearLeftCavityNode.SurfacePressureConstraint.value.value = [pressureValue]
                elif (self.controlledItem == 2):
                    pressureValue = self.rearRightCavityNode.SurfacePressureConstraint.value.value[0] - increment
                    if (pressureValue >= 0):
                        self.rearRightCavityNode.SurfacePressureConstraint.value.value = [pressureValue]
                elif (self.controlledItem == 3):
                    pressureValue = self.frontLeftCavityNode.SurfacePressureConstraint.value.value[0] - increment
                    if (pressureValue >= 0):
                        self.frontLeftCavityNode.SurfacePressureConstraint.value.value = [pressureValue]
                else:
                    pressureValue = self.frontRightCavityNode.SurfacePressureConstraint.value.value[0] - increment
                    if (pressureValue >= 0):
                        self.frontRightCavityNode.SurfacePressureConstraint.value.value = [pressureValue]




class waveController(Sofa.Core.Controller):
    def __init__(self, *args, **kwargs):
        Sofa.Core.Controller.__init__(self, *args, **kwargs)        
        self.node = kwargs.get("node", None)
         
    def init(self):
        
        self.rearLeftCavityNode = self.node.rearLeftCavity   # 1
        self.rearRightCavityNode = self.node.rearRightCavity # 2
        self.frontLeftCavityNode = self.node.frontLeftCavity # 3
        self.frontRightCavityNode = self.node.frontRightCavity # 4
        self.centerCavityNode = self.node.centerCavity # 0
        
        self.controlledItem = 0
        self.inflation = True
        self.time = 0.0
    

    def onAnimateBeginEvent(self, event):
        increment = 50
        if (self.inflation == True):
            pressureValue = 0
            if (self.controlledItem == 1):
                pressureValue = self.centerCavityNode.SurfacePressureConstraint.value.value[0] + increment
                if (pressureValue <= 3500):
                    self.centerCavityNode.SurfacePressureConstraint.value.value = [pressureValue]
                else:
                    self.controlledItem = 2
            if (self.controlledItem == 0):
                pressureValue = self.rearLeftCavityNode.SurfacePressureConstraint.value.value[0] + increment
                if (pressureValue <= 2000):
                    self.rearLeftCavityNode.SurfacePressureConstraint.value.value = [pressureValue]
            if (self.controlledItem == 0):
                pressureValue = self.rearRightCavityNode.SurfacePressureConstraint.value.value[0] + increment
                if (pressureValue <= 2000):
                    self.rearRightCavityNode.SurfacePressureConstraint.value.value = [pressureValue]
                else:
                    self.controlledItem = 1
            if (self.controlledItem == 2):
                pressureValue = self.frontLeftCavityNode.SurfacePressureConstraint.value.value[0] + increment
                if (pressureValue <= 2000):
                    self.frontLeftCavityNode.SurfacePressureConstraint.value.value = [pressureValue]
            if (self.controlledItem == 2):
                pressureValue = self.frontRightCavityNode.SurfacePressureConstraint.value.value[0] + increment
                if (pressureValue <= 2000):
                    self.frontRightCavityNode.SurfacePressureConstraint.value.value = [pressureValue]
                else:
                    self.controlledItem = 0
                    self.inflation = False
                
        else:
            
                if (self.controlledItem == 1):
                    pressureValue = self.centerCavityNode.SurfacePressureConstraint.value.value[0] - increment
                    if (pressureValue >= 0):
                        self.centerCavityNode.SurfacePressureConstraint.value.value = [pressureValue]
                    else:
                        self.controlledItem = 2
                if (self.controlledItem == 0):
                    pressureValue = self.rearLeftCavityNode.SurfacePressureConstraint.value.value[0] - increment
                    if (pressureValue >= 0):
                        self.rearLeftCavityNode.SurfacePressureConstraint.value.value = [pressureValue]
                if (self.controlledItem == 0):
                    pressureValue = self.rearRightCavityNode.SurfacePressureConstraint.value.value[0] - increment
                    if (pressureValue >= 0):
                        self.rearRightCavityNode.SurfacePressureConstraint.value.value = [pressureValue]
                    else:
                        self.controlledItem = 1
                if (self.controlledItem == 2):
                    pressureValue = self.frontLeftCavityNode.SurfacePressureConstraint.value.value[0] - increment
                    if (pressureValue >= 0):
                        self.frontLeftCavityNode.SurfacePressureConstraint.value.value = [pressureValue]
                if (self.controlledItem == 2):
                    pressureValue = self.frontRightCavityNode.SurfacePressureConstraint.value.value[0] - increment
                    if (pressureValue >= 0):
                        self.frontRightCavityNode.SurfacePressureConstraint.value.value = [pressureValue]
                    else:
                        self.controlledItem = 0
                        self.inflation = True


def createScene(rootNode):
                rootNode.addObject('RequiredPlugin', name='SoftRobots', pluginName='SoftRobots')
                rootNode.addObject('RequiredPlugin', name='ModelOrderReduction', pluginName='ModelOrderReduction')
                rootNode.addObject('RequiredPlugin', name='Sofa.Component.AnimationLoop') # Needed to use components [FreeMotionAnimationLoop]  
                rootNode.addObject('RequiredPlugin', name='Sofa.Component.Collision.Detection.Algorithm') # Needed to use components [BVHNarrowPhase,BruteForceBroadPhase,BruteForceDetection,CollisionPipeline]  
                rootNode.addObject('RequiredPlugin', name='Sofa.Component.Collision.Detection.Intersection') # Needed to use components [LocalMinDistance]  
                rootNode.addObject('RequiredPlugin', name='Sofa.Component.Collision.Response.Contact') # Needed to use components [CollisionResponse]  
                rootNode.addObject('RequiredPlugin', name='Sofa.Component.Constraint.Lagrangian.Correction') # Needed to use components [GenericConstraintCorrection]  
                rootNode.addObject('RequiredPlugin', name='Sofa.Component.Constraint.Lagrangian.Solver') # Needed to use components [GenericConstraintSolver]  
                rootNode.addObject('RequiredPlugin', name='Sofa.Component.LinearSolver.Direct') # Needed to use components [SparseLDLSolver]  
                rootNode.addObject('RequiredPlugin', name='Sofa.Component.ODESolver.Backward') # Needed to use components [EulerImplicitSolver]  
                rootNode.addObject('RequiredPlugin', name='Sofa.Component.Setting') # Needed to use components [BackgroundSetting]  
                rootNode.addObject('RequiredPlugin', name='Sofa.Component.Visual') # Needed to use components [VisualStyle]  
                rootNode.addObject('RequiredPlugin', name='Sofa.GL.Component.Rendering3D') # Needed to use components [OglSceneFrame] 
                rootNode.dt.value = 0.05

                rootNode.gravity.value=[0, 0, -9810]
                rootNode.addObject('VisualStyle', displayFlags='showVisualModels hideBehaviorModels hideCollisionModels hideBoundingCollisionModels showForceFields showInteractionForceFields hideWireframe')

                rootNode.addObject('FreeMotionAnimationLoop')
                rootNode.addObject('GenericConstraintSolver', printLog=False, tolerance="1e-4", maxIterations="1000")
                rootNode.addObject('CollisionPipeline')
                rootNode.addObject('BruteForceBroadPhase', name="N2")
                rootNode.addObject('BVHNarrowPhase')
                rootNode.addObject('CollisionResponse', response="FrictionContactConstraint", responseParams="mu=0.7")
                rootNode.addObject('LocalMinDistance', name="Proximity", alarmDistance="2.5", contactDistance="0.5", angleCone="0.01")
                rootNode.addObject('BackgroundSetting', color='0 0.168627 0.211765')
                rootNode.addObject('OglSceneFrame', style="Arrows", alignment="TopRight")
                solverNode = rootNode.addChild('solverNode')
                solverNode.addObject('EulerImplicitSolver', name='odesolver',firstOrder="false", rayleighStiffness='0.01', rayleighMass='0.01', printLog=False)
                solverNode.addObject('SparseLDLSolver', name="preconditioner", template="CompressedRowSparseMatrixMat3x3d")
                solverNode.addObject('GenericConstraintCorrection', linearSolver='@preconditioner')
                solverNode.addObject('MechanicalMatrixMapperMOR', template='Vec1d,Vec1d', object1='@./reducedModel/alpha', object2='@./reducedModel/alpha', nodeToParse='@./reducedModel/model', performECSW=performECSWBoolMappedMatrix, listActiveNodesPath=listActiveNodesFile,timeInvariantMapping1 = True,timeInvariantMapping2 = True, saveReducedMass=False, usePrecomputedMass=False, precomputedMassPath='ROM_data/quadrupedMass_reduced63modes.txt', fastMatrixProduct=False, printLog=False)


                ##########################################
                # FEM Reduced Model                      #
                ##########################################
                reducedModel = solverNode.addChild('reducedModel')
                reducedModel.addObject('MechanicalObject', template='Vec1d',name='alpha', position=modesPositionStr,printLog=False)
                ##########################################
                # FEM Model                              #
                ##########################################
                model = reducedModel.addChild('model')
                model.addObject('MeshVTKLoader', name='loader', filename=pathMesh+'full_quadriped_fine.vtk')
                model.addObject('TetrahedronSetTopologyContainer',src = '@loader')
                model.addObject('MechanicalObject', name='tetras', template='Vec3d', showIndices=False, showIndicesScale='4e-5', rx='0',printLog=False)
                model.addObject('ModelOrderReductionMapping', input='@../alpha', output='@./tetras',modesPath=modesRobot, printLog=False, mapMatrices = '0')
                model.addObject('UniformMass',name='quadrupedMass', totalMass='0.035', printLog=False)
                model.addObject('HyperReducedTetrahedronFEMForceField', template='Vec3d', name='Append_HyperReducedFF_QuadrupedWellConverged_'+str(nbModes)+'modes', method='large', poissonRatio='0.05',  youngModulus='70', prepareECSW=prepareECSWBool, performECSW=performECSWBoolBody, nbModes=str(nbModes), modesPath=modesRobot, RIDPath=RIDFile, weightsPath=weightsFile, nbTrainingSet="93", periodSaveGIE="50",printLog=False)		  
                model.addObject('BoxROI', name='boxROISubTopo', box='0 0 0 150 -100 1', drawBoxes=True) 
                model.addObject('BoxROI', name='membraneROISubTopo', box='0 0 -0.1 150 -100 0.1',computeTetrahedra="false", drawBoxes=True) 
                #model.addObject(waveController(name='toto',node=model))
                model.addObject(keyInteractiveController(name='toto',node=model))

                ##########################################
                # Sub topology                           #
                ##########################################
                modelSubTopo = model.addChild('modelSubTopo')
                modelSubTopo.addObject('TriangleSetTopologyContainer', position='@membraneROISubTopo.pointsInROI', triangles="@membraneROISubTopo.trianglesInROI", name='container')
                modelSubTopo.addObject('HyperReducedTriangleFEMForceField', template='Vec3d', name='Append_subTopoFEM', method='large', poissonRatio='0.49',  youngModulus='5000', prepareECSW=prepareECSWBool, performECSW=performECSWBoolMembrane, nbModes=str(nbModes), modesPath=modesRobot, RIDPath=RIDMembraneFile, weightsPath=weightsMembraneFile, nbTrainingSet="93", periodSaveGIE="50",printLog=False)
                

                ##########################################
                # Constraint                             #
                ##########################################
                centerCavity = model.addChild('centerCavity')
                centerCavity.addObject('MeshSTLLoader', name='loader', filename=pathMesh+'quadriped_Center-cavity_finer.stl')
                centerCavity.addObject('Mesh', src='@loader', name='topo')
                centerCavity.addObject('MechanicalObject', name='centerCavity')
                centerCavity.addObject('SurfacePressureConstraint', name="SurfacePressureConstraint", template='Vec3d', value="0.000", triangles='@topo.triangles', drawPressure='0', drawScale='0.0002', valueType="volumeGrowth")
                centerCavity.addObject('BarycentricMapping', name='mapping',  mapForces=False, mapMasses=False)
                                
                rearLeftCavity = model.addChild('rearLeftCavity')
                rearLeftCavity.addObject('MeshSTLLoader', name='loader', filename=pathMesh+'quadriped_Rear-Left-cavity_finer.stl')
                rearLeftCavity.addObject('Mesh', src='@loader', name='topo')
                rearLeftCavity.addObject('MechanicalObject', name='rearLeftCavity')
                rearLeftCavity.addObject('SurfacePressureConstraint', name="SurfacePressureConstraint", template='Vec3d', valueType="volumeGrowth", value="0.0000", triangles='@topo.triangles', drawPressure='0', drawScale='0.0002')
                rearLeftCavity.addObject('BarycentricMapping', name='mapping',  mapForces=False, mapMasses=False)

                rearRightCavity = model.addChild('rearRightCavity')
                rearRightCavity.addObject('MeshSTLLoader', name='loader', filename=pathMesh+'quadriped_Rear-Right-cavity_finer.stl')
                rearRightCavity.addObject('Mesh', src='@loader', name='topo')
                rearRightCavity.addObject('MechanicalObject', name='rearRightCavity')
                rearRightCavity.addObject('SurfacePressureConstraint', name="SurfacePressureConstraint", template='Vec3d', value="0.000", triangles='@topo.triangles', drawPressure='0', drawScale='0.0002', valueType="volumeGrowth")
                rearRightCavity.addObject('BarycentricMapping', name='mapping',  mapForces=False, mapMasses=False)
                                
                frontLeftCavity = model.addChild('frontLeftCavity')
                frontLeftCavity.addObject('MeshSTLLoader', name='loader', filename=pathMesh+'quadriped_Front-Left-cavity_finer.stl')
                frontLeftCavity.addObject('Mesh', src='@loader', name='topo')
                frontLeftCavity.addObject('MechanicalObject', name='frontLeftCavity')
                frontLeftCavity.addObject('SurfacePressureConstraint', name="SurfacePressureConstraint", template='Vec3d', value="0.0000", triangles='@topo.triangles', drawPressure='0', drawScale='0.0002', valueType="volumeGrowth")
                frontLeftCavity.addObject('BarycentricMapping', name='mapping',  mapForces=False, mapMasses=False)
                                
                frontRightCavity = model.addChild('frontRightCavity')
                frontRightCavity.addObject('MeshSTLLoader', name='loader', filename=pathMesh+'quadriped_Front-Right-cavity_finer.stl')
                frontRightCavity.addObject('Mesh', src='@loader', name='topo')
                frontRightCavity.addObject('MechanicalObject', name='frontRightCavity')
                frontRightCavity.addObject('SurfacePressureConstraint', name="SurfacePressureConstraint", template='Vec3d', value="0.0000", triangles='@topo.triangles', drawPressure='0', drawScale='0.0002', valueType="volumeGrowth")
                frontRightCavity.addObject('BarycentricMapping', name='mapping',  mapForces=False, mapMasses=False)
                                
                modelCollis = model.addChild('modelCollis')
                modelCollis.addObject('MeshSTLLoader', name='loader', filename=pathMesh+'quadriped_collision.stl', rotation="0 0 0", translation="0 0 0")
                modelCollis.addObject('TriangleSetTopologyContainer', src='@loader', name='container')
                modelCollis.addObject('MechanicalObject', name='collisMO', template='Vec3d')
                modelCollis.addObject('TriangleCollisionModel',group="0")
                modelCollis.addObject('LineCollisionModel',group="0")
                modelCollis.addObject('PointCollisionModel',group="0")
                modelCollis.addObject('BarycentricMapping')


                ##########################################
                # Visualization                          #
                ##########################################
                modelVisu = model.addChild('visu')        
                modelVisu.addObject('MeshSTLLoader', name='loader', filename=pathMesh+"quadriped_collision.stl")
                modelVisu.addObject('OglModel', src='@loader', template='Vec3d', color='0.7 0.7 0.7 0.6')
                modelVisu.addObject('BarycentricMapping')

                planeNode = rootNode.addChild('Plane')
                planeNode.addObject('MeshOBJLoader', name='loader', filename="mesh/floorFlat.obj", triangulate="true")
                planeNode.addObject('Mesh', src="@loader")
                planeNode.addObject('MechanicalObject', src="@loader", rotation="90 0 0", translation="0 35 -1", scale="15")
                planeNode.addObject('TriangleCollisionModel',simulated="0", moving="0",group="1")
                planeNode.addObject('LineCollisionModel',simulated="0", moving="0",group="1")
                planeNode.addObject('PointCollisionModel',simulated="0", moving="0",group="1")
                planeNode.addObject('OglModel',name="Visual", src="@loader", color="1 0 0 1",rotation="90 0 0", translation="0 35 -1", scale="15")

                return rootNode
