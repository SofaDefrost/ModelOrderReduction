name: CI

on:
  workflow_dispatch:
  pull_request:
  push:

jobs:
  build-and-test:
    name: Run on ${{ matrix.os }} with SOFA ${{ matrix.sofa_branch }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04, windows-2022, macos-12]
        sofa_branch: [master]

    steps:
            
      - name: Setup SOFA and environment
        id: sofa
        uses: sofa-framework/sofa-setup-action@v5
        with:
          sofa_root: ${{ github.workspace }}/sofa
          sofa_version: ${{ matrix.sofa_branch }}
          sofa_scope: 'standard'
      
      - name: Checkout source code
        uses: actions/checkout@v2
        with:
          path: ${{ env.WORKSPACE_SRC_PATH }}
      
      - name: Build and install
        shell: bash
        run: |
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            cmd //c "${{ steps.sofa.outputs.vs_vsdevcmd }} \
              && cd /d $WORKSPACE_BUILD_PATH \
              && cmake \
                  -GNinja \
                  -DCMAKE_PREFIX_PATH="$SOFA_ROOT/lib/cmake" \
                  -DCMAKE_BUILD_TYPE=Release \
                  -DCMAKE_INSTALL_PREFIX="$WORKSPACE_INSTALL_PATH" \
                  ../src \
              && ninja install"
          else
            cd "$WORKSPACE_BUILD_PATH"
            ccache -z
            cmake \
              -GNinja \
              -DCMAKE_C_COMPILER_LAUNCHER=ccache \
              -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
              -DCMAKE_PREFIX_PATH=$SOFA_ROOT/lib/cmake \
              -DCMAKE_BUILD_TYPE=Release \
              -DCMAKE_INSTALL_PREFIX="$WORKSPACE_INSTALL_PATH" \
              ../src
            ninja install
            echo ${CCACHE_BASEDIR}
            ccache -s
          fi

      - name: Sanitize artifact name
        id: sanitize
        # This step removes special characters from the artifact name to ensure compatibility with upload-artifact
        # Characters removed: " : < > | * ? \r \n \ /
        # Spaces are replaced with underscores
        # This sanitization prevents errors in artifact creation and retrieval
        shell: pwsh
        run: |
          $originalName = "ModelOrderReduction_${{ steps.sofa.outputs.run_branch }}_for-SOFA-${{ steps.sofa.outputs.sofa_version }}_${{ runner.os }}"
          $artifact_name = $originalName -replace '[":;<>|*?\r\n\\/]', '' -replace ' ', '_'
          echo "artifact_name=$artifact_name" >> $env:GITHUB_OUTPUT
 
      - name: Create artifact
        uses: actions/upload-artifact@v4.4.0
        with:
          name: ${{ steps.sanitize.outputs.artifact_name }}
          path: ${{ env.WORKSPACE_INSTALL_PATH }}

      - name: Install artifact
        uses: actions/download-artifact@v4.1.7
        with:
          name: ${{ steps.sanitize.outputs.artifact_name }}
          path: ${{ env.WORKSPACE_ARTIFACT_PATH }}
           
      - name: Check environment for tests
        shell: bash
        run: |
          echo '------ ls -la "$WORKSPACE_SRC_PATH" ------'
          ls -la "$WORKSPACE_SRC_PATH"
          echo '------ ls -la "$WORKSPACE_BUILD_PATH" ------'
          ls -la "$WORKSPACE_BUILD_PATH"
          echo '------ ls -la "$WORKSPACE_INSTALL_PATH" ------'
          ls -la "$WORKSPACE_INSTALL_PATH"
          echo '------ ls -la "$WORKSPACE_ARTIFACT_PATH" ------'
          ls -la "$WORKSPACE_ARTIFACT_PATH"
          echo '----------------------'
          echo "SOFA_ROOT = $SOFA_ROOT"
          echo '----------------------'
          python -c "import sys; print('sys.version = ' + str(sys.version)); print('sys.path = ' + str(sys.path))"

  deploy:
    name: Deploy artifacts
    if: always() && startsWith(github.repository, 'SofaDefrost') && (startsWith(github.ref, 'refs/heads/') || startsWith(github.ref, 'refs/tags/')) # we are not on a fork and on a branch or a tag (not a PR)
    needs: [build-and-test]
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: Get artifacts
        uses: actions/download-artifact@v4.1.7
        with:
          path: artifacts

      - name: Zip artifacts
        shell: bash
        run: |
          cd $GITHUB_WORKSPACE/artifacts
          for artifact in *; do
            zip $artifact.zip -r $artifact/*
          done
      - name: Upload release
        uses: softprops/action-gh-release@v1
        with:
          name: ${{ github.ref_name }}
          tag_name: release-${{ github.ref_name }}
          fail_on_unmatched_files: false
          target_commitish: ${{ github.sha }}
          files: |
            artifacts/ModelOrderReduction_*_Linux.zip
            artifacts/ModelOrderReduction_*_Windows.zip
            artifacts/ModelOrderReduction_*_macOS.zip
